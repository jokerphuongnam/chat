// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthorizesColumns holds the columns for the "authorizes" table.
	AuthorizesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "jwt_token", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "token", Type: field.TypeString, Unique: true},
	}
	// AuthorizesTable holds the schema information for the "authorizes" table.
	AuthorizesTable = &schema.Table{
		Name:       "authorizes",
		Columns:    AuthorizesColumns,
		PrimaryKey: []*schema.Column{AuthorizesColumns[0]},
	}
	// MembersColumns holds the columns for the "members" table.
	MembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"OWNER", "ADMIN", "USER"}},
		{Name: "nick_name", Type: field.TypeString, Nullable: true, Size: 24},
		{Name: "room_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// MembersTable holds the schema information for the "members" table.
	MembersTable = &schema.Table{
		Name:       "members",
		Columns:    MembersColumns,
		PrimaryKey: []*schema.Column{MembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "members_rooms_members",
				Columns:    []*schema.Column{MembersColumns[3]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "members_users_members",
				Columns:    []*schema.Column{MembersColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "member_user_id_room_id",
				Unique:  true,
				Columns: []*schema.Column{MembersColumns[4], MembersColumns[3]},
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "date_send", Type: field.TypeUint64},
		{Name: "type_message", Type: field.TypeEnum, Enums: []string{"text", "image", "audio", "video", "location", "contact"}},
		{Name: "content", Type: field.TypeString},
		{Name: "id_room", Type: field.TypeUUID},
		{Name: "id_user_send", Type: field.TypeUUID},
		{Name: "room_messages", Type: field.TypeUUID},
		{Name: "user_messages", Type: field.TypeUUID},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_rooms_messages",
				Columns:    []*schema.Column{MessagesColumns[6]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "messages_users_messages",
				Columns:    []*schema.Column{MessagesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RoomsColumns holds the columns for the "rooms" table.
	RoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "color", Type: field.TypeString, Size: 255},
		{Name: "id_info", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// RoomsTable holds the schema information for the "rooms" table.
	RoomsTable = &schema.Table{
		Name:       "rooms",
		Columns:    RoomsColumns,
		PrimaryKey: []*schema.Column{RoomsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rooms_room_infos_rooms",
				Columns:    []*schema.Column{RoomsColumns[2]},
				RefColumns: []*schema.Column{RoomInfosColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RoomInfosColumns holds the columns for the "room_infos" table.
	RoomInfosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "room_image_url", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
	}
	// RoomInfosTable holds the schema information for the "room_infos" table.
	RoomInfosTable = &schema.Table{
		Name:       "room_infos",
		Columns:    RoomInfosColumns,
		PrimaryKey: []*schema.Column{RoomInfosColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "avatar_url", Type: field.TypeString, Nullable: true},
		{Name: "id_authorize", Type: field.TypeUUID},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UsernamePasswordsColumns holds the columns for the "username_passwords" table.
	UsernamePasswordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 16},
		{Name: "password", Type: field.TypeString},
	}
	// UsernamePasswordsTable holds the schema information for the "username_passwords" table.
	UsernamePasswordsTable = &schema.Table{
		Name:       "username_passwords",
		Columns:    UsernamePasswordsColumns,
		PrimaryKey: []*schema.Column{UsernamePasswordsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthorizesTable,
		MembersTable,
		MessagesTable,
		RoomsTable,
		RoomInfosTable,
		UsersTable,
		UsernamePasswordsTable,
	}
)

func init() {
	MembersTable.ForeignKeys[0].RefTable = RoomsTable
	MembersTable.ForeignKeys[1].RefTable = UsersTable
	MessagesTable.ForeignKeys[0].RefTable = RoomsTable
	MessagesTable.ForeignKeys[1].RefTable = UsersTable
	RoomsTable.ForeignKeys[0].RefTable = RoomInfosTable
}
