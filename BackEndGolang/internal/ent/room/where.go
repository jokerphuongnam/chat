// Code generated by ent, DO NOT EDIT.

package room

import (
	"chat-backend/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldID, id))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldColor, v))
}

// IDInfo applies equality check predicate on the "id_info" field. It's identical to IDInfoEQ.
func IDInfo(v uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldIDInfo, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldColor, v))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldColor, v))
}

// IDInfoEQ applies the EQ predicate on the "id_info" field.
func IDInfoEQ(v uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldIDInfo, v))
}

// IDInfoNEQ applies the NEQ predicate on the "id_info" field.
func IDInfoNEQ(v uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldIDInfo, v))
}

// IDInfoIn applies the In predicate on the "id_info" field.
func IDInfoIn(vs ...uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldIDInfo, vs...))
}

// IDInfoNotIn applies the NotIn predicate on the "id_info" field.
func IDInfoNotIn(vs ...uuid.UUID) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldIDInfo, vs...))
}

// IDInfoIsNil applies the IsNil predicate on the "id_info" field.
func IDInfoIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldIDInfo))
}

// IDInfoNotNil applies the NotNil predicate on the "id_info" field.
func IDInfoNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldIDInfo))
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.Member) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoomInfo applies the HasEdge predicate on the "room_info" edge.
func HasRoomInfo() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RoomInfoTable, RoomInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomInfoWith applies the HasEdge predicate on the "room_info" edge with a given conditions (other predicates).
func HasRoomInfoWith(preds ...predicate.RoomInfo) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newRoomInfoStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessages applies the HasEdge predicate on the "messages" edge.
func HasMessages() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagesTable, MessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagesWith applies the HasEdge predicate on the "messages" edge with a given conditions (other predicates).
func HasMessagesWith(preds ...predicate.Message) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(sql.NotPredicates(p))
}
