// Code generated by ent, DO NOT EDIT.

package roominfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the roominfo type in the database.
	Label = "room_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRoomImageURL holds the string denoting the room_image_url field in the database.
	FieldRoomImageURL = "room_image_url"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeRooms holds the string denoting the rooms edge name in mutations.
	EdgeRooms = "rooms"
	// Table holds the table name of the roominfo in the database.
	Table = "room_infos"
	// RoomsTable is the table that holds the rooms relation/edge.
	RoomsTable = "rooms"
	// RoomsInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomsInverseTable = "rooms"
	// RoomsColumn is the table column denoting the rooms relation/edge.
	RoomsColumn = "id_info"
)

// Columns holds all SQL columns for roominfo fields.
var Columns = []string{
	FieldID,
	FieldRoomImageURL,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the RoomInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRoomImageURL orders the results by the room_image_url field.
func ByRoomImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoomImageURL, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRoomsField orders the results by rooms field.
func ByRoomsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomsStep(), sql.OrderByField(field, opts...))
	}
}
func newRoomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RoomsTable, RoomsColumn),
	)
}
