// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat-backend/internal/ent/message"
	"chat-backend/internal/ent/room"
	"chat-backend/internal/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DateSend holds the value of the "date_send" field.
	DateSend uint64 `json:"date_send,omitempty"`
	// TypeMessage holds the value of the "type_message" field.
	TypeMessage message.TypeMessage `json:"type_message,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// IDRoom holds the value of the "id_room" field.
	IDRoom uuid.UUID `json:"id_room,omitempty"`
	// IDUserSend holds the value of the "id_user_send" field.
	IDUserSend uuid.UUID `json:"id_user_send,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges        MessageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Rooms holds the value of the rooms edge.
	Rooms *Room `json:"rooms,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoomsOrErr returns the Rooms value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) RoomsOrErr() (*Room, error) {
	if e.Rooms != nil {
		return e.Rooms, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "rooms"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldDateSend:
			values[i] = new(sql.NullInt64)
		case message.FieldTypeMessage, message.FieldContent:
			values[i] = new(sql.NullString)
		case message.FieldID, message.FieldIDRoom, message.FieldIDUserSend:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case message.FieldDateSend:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field date_send", values[i])
			} else if value.Valid {
				m.DateSend = uint64(value.Int64)
			}
		case message.FieldTypeMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_message", values[i])
			} else if value.Valid {
				m.TypeMessage = message.TypeMessage(value.String)
			}
		case message.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				m.Content = value.String
			}
		case message.FieldIDRoom:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id_room", values[i])
			} else if value != nil {
				m.IDRoom = *value
			}
		case message.FieldIDUserSend:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id_user_send", values[i])
			} else if value != nil {
				m.IDUserSend = *value
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryRooms queries the "rooms" edge of the Message entity.
func (m *Message) QueryRooms() *RoomQuery {
	return NewMessageClient(m.config).QueryRooms(m)
}

// QueryUsers queries the "users" edge of the Message entity.
func (m *Message) QueryUsers() *UserQuery {
	return NewMessageClient(m.config).QueryUsers(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("date_send=")
	builder.WriteString(fmt.Sprintf("%v", m.DateSend))
	builder.WriteString(", ")
	builder.WriteString("type_message=")
	builder.WriteString(fmt.Sprintf("%v", m.TypeMessage))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(m.Content)
	builder.WriteString(", ")
	builder.WriteString("id_room=")
	builder.WriteString(fmt.Sprintf("%v", m.IDRoom))
	builder.WriteString(", ")
	builder.WriteString("id_user_send=")
	builder.WriteString(fmt.Sprintf("%v", m.IDUserSend))
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
