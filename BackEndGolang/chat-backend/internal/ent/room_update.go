// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat-backend/internal/ent/member"
	"chat-backend/internal/ent/message"
	"chat-backend/internal/ent/predicate"
	"chat-backend/internal/ent/room"
	"chat-backend/internal/ent/roominfo"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetColor sets the "color" field.
func (ru *RoomUpdate) SetColor(s string) *RoomUpdate {
	ru.mutation.SetColor(s)
	return ru
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableColor(s *string) *RoomUpdate {
	if s != nil {
		ru.SetColor(*s)
	}
	return ru
}

// SetIDInfo sets the "id_info" field.
func (ru *RoomUpdate) SetIDInfo(u uuid.UUID) *RoomUpdate {
	ru.mutation.SetIDInfo(u)
	return ru
}

// SetNillableIDInfo sets the "id_info" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableIDInfo(u *uuid.UUID) *RoomUpdate {
	if u != nil {
		ru.SetIDInfo(*u)
	}
	return ru
}

// ClearIDInfo clears the value of the "id_info" field.
func (ru *RoomUpdate) ClearIDInfo() *RoomUpdate {
	ru.mutation.ClearIDInfo()
	return ru
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (ru *RoomUpdate) AddMemberIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddMemberIDs(ids...)
	return ru
}

// AddMembers adds the "members" edges to the Member entity.
func (ru *RoomUpdate) AddMembers(m ...*Member) *RoomUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMemberIDs(ids...)
}

// SetRoomInfoID sets the "room_info" edge to the RoomInfo entity by ID.
func (ru *RoomUpdate) SetRoomInfoID(id uuid.UUID) *RoomUpdate {
	ru.mutation.SetRoomInfoID(id)
	return ru
}

// SetNillableRoomInfoID sets the "room_info" edge to the RoomInfo entity by ID if the given value is not nil.
func (ru *RoomUpdate) SetNillableRoomInfoID(id *uuid.UUID) *RoomUpdate {
	if id != nil {
		ru = ru.SetRoomInfoID(*id)
	}
	return ru
}

// SetRoomInfo sets the "room_info" edge to the RoomInfo entity.
func (ru *RoomUpdate) SetRoomInfo(r *RoomInfo) *RoomUpdate {
	return ru.SetRoomInfoID(r.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (ru *RoomUpdate) AddMessageIDs(ids ...uuid.UUID) *RoomUpdate {
	ru.mutation.AddMessageIDs(ids...)
	return ru
}

// AddMessages adds the "messages" edges to the Message entity.
func (ru *RoomUpdate) AddMessages(m ...*Message) *RoomUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMessageIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearMembers clears all "members" edges to the Member entity.
func (ru *RoomUpdate) ClearMembers() *RoomUpdate {
	ru.mutation.ClearMembers()
	return ru
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (ru *RoomUpdate) RemoveMemberIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveMemberIDs(ids...)
	return ru
}

// RemoveMembers removes "members" edges to Member entities.
func (ru *RoomUpdate) RemoveMembers(m ...*Member) *RoomUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMemberIDs(ids...)
}

// ClearRoomInfo clears the "room_info" edge to the RoomInfo entity.
func (ru *RoomUpdate) ClearRoomInfo() *RoomUpdate {
	ru.mutation.ClearRoomInfo()
	return ru
}

// ClearMessages clears all "messages" edges to the Message entity.
func (ru *RoomUpdate) ClearMessages() *RoomUpdate {
	ru.mutation.ClearMessages()
	return ru
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (ru *RoomUpdate) RemoveMessageIDs(ids ...uuid.UUID) *RoomUpdate {
	ru.mutation.RemoveMessageIDs(ids...)
	return ru
}

// RemoveMessages removes "messages" edges to Message entities.
func (ru *RoomUpdate) RemoveMessages(m ...*Message) *RoomUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoomUpdate) check() error {
	if v, ok := ru.mutation.Color(); ok {
		if err := room.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Room.color": %w`, err)}
		}
	}
	return nil
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Color(); ok {
		_spec.SetField(room.FieldColor, field.TypeString, value)
	}
	if ru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MembersTable,
			Columns: []string{room.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ru.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MembersTable,
			Columns: []string{room.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MembersTable,
			Columns: []string{room.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RoomInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.RoomInfoTable,
			Columns: []string{room.RoomInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roominfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoomInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.RoomInfoTable,
			Columns: []string{room.RoomInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roominfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !ru.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetColor sets the "color" field.
func (ruo *RoomUpdateOne) SetColor(s string) *RoomUpdateOne {
	ruo.mutation.SetColor(s)
	return ruo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableColor(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetColor(*s)
	}
	return ruo
}

// SetIDInfo sets the "id_info" field.
func (ruo *RoomUpdateOne) SetIDInfo(u uuid.UUID) *RoomUpdateOne {
	ruo.mutation.SetIDInfo(u)
	return ruo
}

// SetNillableIDInfo sets the "id_info" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableIDInfo(u *uuid.UUID) *RoomUpdateOne {
	if u != nil {
		ruo.SetIDInfo(*u)
	}
	return ruo
}

// ClearIDInfo clears the value of the "id_info" field.
func (ruo *RoomUpdateOne) ClearIDInfo() *RoomUpdateOne {
	ruo.mutation.ClearIDInfo()
	return ruo
}

// AddMemberIDs adds the "members" edge to the Member entity by IDs.
func (ruo *RoomUpdateOne) AddMemberIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddMemberIDs(ids...)
	return ruo
}

// AddMembers adds the "members" edges to the Member entity.
func (ruo *RoomUpdateOne) AddMembers(m ...*Member) *RoomUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMemberIDs(ids...)
}

// SetRoomInfoID sets the "room_info" edge to the RoomInfo entity by ID.
func (ruo *RoomUpdateOne) SetRoomInfoID(id uuid.UUID) *RoomUpdateOne {
	ruo.mutation.SetRoomInfoID(id)
	return ruo
}

// SetNillableRoomInfoID sets the "room_info" edge to the RoomInfo entity by ID if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableRoomInfoID(id *uuid.UUID) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetRoomInfoID(*id)
	}
	return ruo
}

// SetRoomInfo sets the "room_info" edge to the RoomInfo entity.
func (ruo *RoomUpdateOne) SetRoomInfo(r *RoomInfo) *RoomUpdateOne {
	return ruo.SetRoomInfoID(r.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (ruo *RoomUpdateOne) AddMessageIDs(ids ...uuid.UUID) *RoomUpdateOne {
	ruo.mutation.AddMessageIDs(ids...)
	return ruo
}

// AddMessages adds the "messages" edges to the Message entity.
func (ruo *RoomUpdateOne) AddMessages(m ...*Message) *RoomUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMessageIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearMembers clears all "members" edges to the Member entity.
func (ruo *RoomUpdateOne) ClearMembers() *RoomUpdateOne {
	ruo.mutation.ClearMembers()
	return ruo
}

// RemoveMemberIDs removes the "members" edge to Member entities by IDs.
func (ruo *RoomUpdateOne) RemoveMemberIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveMemberIDs(ids...)
	return ruo
}

// RemoveMembers removes "members" edges to Member entities.
func (ruo *RoomUpdateOne) RemoveMembers(m ...*Member) *RoomUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMemberIDs(ids...)
}

// ClearRoomInfo clears the "room_info" edge to the RoomInfo entity.
func (ruo *RoomUpdateOne) ClearRoomInfo() *RoomUpdateOne {
	ruo.mutation.ClearRoomInfo()
	return ruo
}

// ClearMessages clears all "messages" edges to the Message entity.
func (ruo *RoomUpdateOne) ClearMessages() *RoomUpdateOne {
	ruo.mutation.ClearMessages()
	return ruo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (ruo *RoomUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *RoomUpdateOne {
	ruo.mutation.RemoveMessageIDs(ids...)
	return ruo
}

// RemoveMessages removes "messages" edges to Message entities.
func (ruo *RoomUpdateOne) RemoveMessages(m ...*Message) *RoomUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoomUpdateOne) check() error {
	if v, ok := ruo.mutation.Color(); ok {
		if err := room.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Room.color": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Color(); ok {
		_spec.SetField(room.FieldColor, field.TypeString, value)
	}
	if ruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MembersTable,
			Columns: []string{room.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ruo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MembersTable,
			Columns: []string{room.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MembersTable,
			Columns: []string{room.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RoomInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.RoomInfoTable,
			Columns: []string{room.RoomInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roominfo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoomInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   room.RoomInfoTable,
			Columns: []string{room.RoomInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roominfo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !ruo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.MessagesTable,
			Columns: []string{room.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
