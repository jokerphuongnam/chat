// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat-service/internal/ent/room"
	"chat-service/internal/ent/roominfo"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// RoomInfo is the model entity for the RoomInfo schema.
type RoomInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RoomImageURL holds the value of the "room_image_url" field.
	RoomImageURL string `json:"room_image_url,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomInfoQuery when eager-loading is set.
	Edges        RoomInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoomInfoEdges holds the relations/edges for other nodes in the graph.
type RoomInfoEdges struct {
	// Rooms holds the value of the rooms edge.
	Rooms *Room `json:"rooms,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomsOrErr returns the Rooms value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomInfoEdges) RoomsOrErr() (*Room, error) {
	if e.Rooms != nil {
		return e.Rooms, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "rooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoomInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roominfo.FieldRoomImageURL, roominfo.FieldName:
			values[i] = new(sql.NullString)
		case roominfo.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoomInfo fields.
func (ri *RoomInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roominfo.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ri.ID = *value
			}
		case roominfo.FieldRoomImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_image_url", values[i])
			} else if value.Valid {
				ri.RoomImageURL = value.String
			}
		case roominfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ri.Name = value.String
			}
		default:
			ri.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoomInfo.
// This includes values selected through modifiers, order, etc.
func (ri *RoomInfo) Value(name string) (ent.Value, error) {
	return ri.selectValues.Get(name)
}

// QueryRooms queries the "rooms" edge of the RoomInfo entity.
func (ri *RoomInfo) QueryRooms() *RoomQuery {
	return NewRoomInfoClient(ri.config).QueryRooms(ri)
}

// Update returns a builder for updating this RoomInfo.
// Note that you need to call RoomInfo.Unwrap() before calling this method if this RoomInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ri *RoomInfo) Update() *RoomInfoUpdateOne {
	return NewRoomInfoClient(ri.config).UpdateOne(ri)
}

// Unwrap unwraps the RoomInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ri *RoomInfo) Unwrap() *RoomInfo {
	_tx, ok := ri.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoomInfo is not a transactional entity")
	}
	ri.config.driver = _tx.drv
	return ri
}

// String implements the fmt.Stringer.
func (ri *RoomInfo) String() string {
	var builder strings.Builder
	builder.WriteString("RoomInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ri.ID))
	builder.WriteString("room_image_url=")
	builder.WriteString(ri.RoomImageURL)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ri.Name)
	builder.WriteByte(')')
	return builder.String()
}

// RoomInfos is a parsable slice of RoomInfo.
type RoomInfos []*RoomInfo
