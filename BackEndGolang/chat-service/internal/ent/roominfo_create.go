// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat-service/internal/ent/room"
	"chat-service/internal/ent/roominfo"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RoomInfoCreate is the builder for creating a RoomInfo entity.
type RoomInfoCreate struct {
	config
	mutation *RoomInfoMutation
	hooks    []Hook
}

// SetRoomImageURL sets the "room_image_url" field.
func (ric *RoomInfoCreate) SetRoomImageURL(s string) *RoomInfoCreate {
	ric.mutation.SetRoomImageURL(s)
	return ric
}

// SetNillableRoomImageURL sets the "room_image_url" field if the given value is not nil.
func (ric *RoomInfoCreate) SetNillableRoomImageURL(s *string) *RoomInfoCreate {
	if s != nil {
		ric.SetRoomImageURL(*s)
	}
	return ric
}

// SetName sets the "name" field.
func (ric *RoomInfoCreate) SetName(s string) *RoomInfoCreate {
	ric.mutation.SetName(s)
	return ric
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ric *RoomInfoCreate) SetNillableName(s *string) *RoomInfoCreate {
	if s != nil {
		ric.SetName(*s)
	}
	return ric
}

// SetID sets the "id" field.
func (ric *RoomInfoCreate) SetID(u uuid.UUID) *RoomInfoCreate {
	ric.mutation.SetID(u)
	return ric
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ric *RoomInfoCreate) SetNillableID(u *uuid.UUID) *RoomInfoCreate {
	if u != nil {
		ric.SetID(*u)
	}
	return ric
}

// SetRoomsID sets the "rooms" edge to the Room entity by ID.
func (ric *RoomInfoCreate) SetRoomsID(id uuid.UUID) *RoomInfoCreate {
	ric.mutation.SetRoomsID(id)
	return ric
}

// SetNillableRoomsID sets the "rooms" edge to the Room entity by ID if the given value is not nil.
func (ric *RoomInfoCreate) SetNillableRoomsID(id *uuid.UUID) *RoomInfoCreate {
	if id != nil {
		ric = ric.SetRoomsID(*id)
	}
	return ric
}

// SetRooms sets the "rooms" edge to the Room entity.
func (ric *RoomInfoCreate) SetRooms(r *Room) *RoomInfoCreate {
	return ric.SetRoomsID(r.ID)
}

// Mutation returns the RoomInfoMutation object of the builder.
func (ric *RoomInfoCreate) Mutation() *RoomInfoMutation {
	return ric.mutation
}

// Save creates the RoomInfo in the database.
func (ric *RoomInfoCreate) Save(ctx context.Context) (*RoomInfo, error) {
	ric.defaults()
	return withHooks(ctx, ric.sqlSave, ric.mutation, ric.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ric *RoomInfoCreate) SaveX(ctx context.Context) *RoomInfo {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ric *RoomInfoCreate) Exec(ctx context.Context) error {
	_, err := ric.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ric *RoomInfoCreate) ExecX(ctx context.Context) {
	if err := ric.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ric *RoomInfoCreate) defaults() {
	if _, ok := ric.mutation.ID(); !ok {
		v := roominfo.DefaultID()
		ric.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ric *RoomInfoCreate) check() error {
	return nil
}

func (ric *RoomInfoCreate) sqlSave(ctx context.Context) (*RoomInfo, error) {
	if err := ric.check(); err != nil {
		return nil, err
	}
	_node, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ric.mutation.id = &_node.ID
	ric.mutation.done = true
	return _node, nil
}

func (ric *RoomInfoCreate) createSpec() (*RoomInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomInfo{config: ric.config}
		_spec = sqlgraph.NewCreateSpec(roominfo.Table, sqlgraph.NewFieldSpec(roominfo.FieldID, field.TypeUUID))
	)
	if id, ok := ric.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ric.mutation.RoomImageURL(); ok {
		_spec.SetField(roominfo.FieldRoomImageURL, field.TypeString, value)
		_node.RoomImageURL = value
	}
	if value, ok := ric.mutation.Name(); ok {
		_spec.SetField(roominfo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := ric.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   roominfo.RoomsTable,
			Columns: []string{roominfo.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoomInfoCreateBulk is the builder for creating many RoomInfo entities in bulk.
type RoomInfoCreateBulk struct {
	config
	err      error
	builders []*RoomInfoCreate
}

// Save creates the RoomInfo entities in the database.
func (ricb *RoomInfoCreateBulk) Save(ctx context.Context) ([]*RoomInfo, error) {
	if ricb.err != nil {
		return nil, ricb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ricb.builders))
	nodes := make([]*RoomInfo, len(ricb.builders))
	mutators := make([]Mutator, len(ricb.builders))
	for i := range ricb.builders {
		func(i int, root context.Context) {
			builder := ricb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ricb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ricb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ricb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ricb *RoomInfoCreateBulk) SaveX(ctx context.Context) []*RoomInfo {
	v, err := ricb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ricb *RoomInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ricb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ricb *RoomInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ricb.Exec(ctx); err != nil {
		panic(err)
	}
}
