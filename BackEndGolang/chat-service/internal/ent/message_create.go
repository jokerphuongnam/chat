// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chat-service/internal/ent/message"
	"chat-service/internal/ent/room"
	"chat-service/internal/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MessageCreate is the builder for creating a Message entity.
type MessageCreate struct {
	config
	mutation *MessageMutation
	hooks    []Hook
}

// SetDateSend sets the "date_send" field.
func (mc *MessageCreate) SetDateSend(u uint64) *MessageCreate {
	mc.mutation.SetDateSend(u)
	return mc
}

// SetTypeMessage sets the "type_message" field.
func (mc *MessageCreate) SetTypeMessage(mm message.TypeMessage) *MessageCreate {
	mc.mutation.SetTypeMessage(mm)
	return mc
}

// SetContent sets the "content" field.
func (mc *MessageCreate) SetContent(s string) *MessageCreate {
	mc.mutation.SetContent(s)
	return mc
}

// SetIDRoom sets the "id_room" field.
func (mc *MessageCreate) SetIDRoom(u uuid.UUID) *MessageCreate {
	mc.mutation.SetIDRoom(u)
	return mc
}

// SetIDUserSend sets the "id_user_send" field.
func (mc *MessageCreate) SetIDUserSend(u uuid.UUID) *MessageCreate {
	mc.mutation.SetIDUserSend(u)
	return mc
}

// SetID sets the "id" field.
func (mc *MessageCreate) SetID(u uuid.UUID) *MessageCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MessageCreate) SetNillableID(u *uuid.UUID) *MessageCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetRoomsID sets the "rooms" edge to the Room entity by ID.
func (mc *MessageCreate) SetRoomsID(id uuid.UUID) *MessageCreate {
	mc.mutation.SetRoomsID(id)
	return mc
}

// SetRooms sets the "rooms" edge to the Room entity.
func (mc *MessageCreate) SetRooms(r *Room) *MessageCreate {
	return mc.SetRoomsID(r.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (mc *MessageCreate) SetUsersID(id uuid.UUID) *MessageCreate {
	mc.mutation.SetUsersID(id)
	return mc
}

// SetUsers sets the "users" edge to the User entity.
func (mc *MessageCreate) SetUsers(u *User) *MessageCreate {
	return mc.SetUsersID(u.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mc *MessageCreate) Mutation() *MessageMutation {
	return mc.mutation
}

// Save creates the Message in the database.
func (mc *MessageCreate) Save(ctx context.Context) (*Message, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MessageCreate) SaveX(ctx context.Context) *Message {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MessageCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MessageCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MessageCreate) defaults() {
	if _, ok := mc.mutation.ID(); !ok {
		v := message.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MessageCreate) check() error {
	if _, ok := mc.mutation.DateSend(); !ok {
		return &ValidationError{Name: "date_send", err: errors.New(`ent: missing required field "Message.date_send"`)}
	}
	if _, ok := mc.mutation.TypeMessage(); !ok {
		return &ValidationError{Name: "type_message", err: errors.New(`ent: missing required field "Message.type_message"`)}
	}
	if v, ok := mc.mutation.TypeMessage(); ok {
		if err := message.TypeMessageValidator(v); err != nil {
			return &ValidationError{Name: "type_message", err: fmt.Errorf(`ent: validator failed for field "Message.type_message": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Message.content"`)}
	}
	if _, ok := mc.mutation.IDRoom(); !ok {
		return &ValidationError{Name: "id_room", err: errors.New(`ent: missing required field "Message.id_room"`)}
	}
	if _, ok := mc.mutation.IDUserSend(); !ok {
		return &ValidationError{Name: "id_user_send", err: errors.New(`ent: missing required field "Message.id_user_send"`)}
	}
	if len(mc.mutation.RoomsIDs()) == 0 {
		return &ValidationError{Name: "rooms", err: errors.New(`ent: missing required edge "Message.rooms"`)}
	}
	if len(mc.mutation.UsersIDs()) == 0 {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "Message.users"`)}
	}
	return nil
}

func (mc *MessageCreate) sqlSave(ctx context.Context) (*Message, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MessageCreate) createSpec() (*Message, *sqlgraph.CreateSpec) {
	var (
		_node = &Message{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(message.Table, sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.DateSend(); ok {
		_spec.SetField(message.FieldDateSend, field.TypeUint64, value)
		_node.DateSend = value
	}
	if value, ok := mc.mutation.TypeMessage(); ok {
		_spec.SetField(message.FieldTypeMessage, field.TypeEnum, value)
		_node.TypeMessage = value
	}
	if value, ok := mc.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if nodes := mc.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomsTable,
			Columns: []string{message.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IDRoom = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UsersTable,
			Columns: []string{message.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IDUserSend = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessageCreateBulk is the builder for creating many Message entities in bulk.
type MessageCreateBulk struct {
	config
	err      error
	builders []*MessageCreate
}

// Save creates the Message entities in the database.
func (mcb *MessageCreateBulk) Save(ctx context.Context) ([]*Message, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Message, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MessageCreateBulk) SaveX(ctx context.Context) []*Message {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MessageCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MessageCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
