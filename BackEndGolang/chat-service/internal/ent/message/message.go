// Code generated by ent, DO NOT EDIT.

package message

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDateSend holds the string denoting the date_send field in the database.
	FieldDateSend = "date_send"
	// FieldTypeMessage holds the string denoting the type_message field in the database.
	FieldTypeMessage = "type_message"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldIDRoom holds the string denoting the id_room field in the database.
	FieldIDRoom = "id_room"
	// FieldIDUserSend holds the string denoting the id_user_send field in the database.
	FieldIDUserSend = "id_user_send"
	// EdgeRooms holds the string denoting the rooms edge name in mutations.
	EdgeRooms = "rooms"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// RoomsTable is the table that holds the rooms relation/edge.
	RoomsTable = "messages"
	// RoomsInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomsInverseTable = "rooms"
	// RoomsColumn is the table column denoting the rooms relation/edge.
	RoomsColumn = "id_room"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "messages"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "id_user_send"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldDateSend,
	FieldTypeMessage,
	FieldContent,
	FieldIDRoom,
	FieldIDUserSend,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// TypeMessage defines the type for the "type_message" enum field.
type TypeMessage string

// TypeMessage values.
const (
	TypeMessageText     TypeMessage = "text"
	TypeMessageImage    TypeMessage = "image"
	TypeMessageAudio    TypeMessage = "audio"
	TypeMessageVideo    TypeMessage = "video"
	TypeMessageLocation TypeMessage = "location"
	TypeMessageContact  TypeMessage = "contact"
)

func (tm TypeMessage) String() string {
	return string(tm)
}

// TypeMessageValidator is a validator for the "type_message" field enum values. It is called by the builders before save.
func TypeMessageValidator(tm TypeMessage) error {
	switch tm {
	case TypeMessageText, TypeMessageImage, TypeMessageAudio, TypeMessageVideo, TypeMessageLocation, TypeMessageContact:
		return nil
	default:
		return fmt.Errorf("message: invalid enum value for type_message field: %q", tm)
	}
}

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDateSend orders the results by the date_send field.
func ByDateSend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateSend, opts...).ToFunc()
}

// ByTypeMessage orders the results by the type_message field.
func ByTypeMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeMessage, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByIDRoom orders the results by the id_room field.
func ByIDRoom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDRoom, opts...).ToFunc()
}

// ByIDUserSend orders the results by the id_user_send field.
func ByIDUserSend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDUserSend, opts...).ToFunc()
}

// ByRoomsField orders the results by rooms field.
func ByRoomsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomsStep(), sql.OrderByField(field, opts...))
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newRoomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoomsTable, RoomsColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}
